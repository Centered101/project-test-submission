// ‚Äî[ preloader ]‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

$(window).on('load', function () {
    $('#preloader').fadeOut(700);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
function disableLink(event) {
    event.preventDefault();
}

// ‚Äî[ Notifications ]‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

// Detect when offline
$(window).on("offline", function () {
    showNotification("Oh no! You are offline üòê", 'info');
});

// Detect when back online
$(window).on("online", function () {
    showNotification("Glad you're back online! üòç", 'success');
});

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification queue ‡πÅ‡∏•‡∏∞ history
let notificationQueue = [];
let notificationContainer = null;
let notificationHistory = [];
let isHistoryPanelOpen = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á history
function addToHistory(message, type, link = null, timestamp = null) {
    const historyItem = {
        id: Date.now() + Math.random(), // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique id
        message: message,
        type: type,
        link: link,
        timestamp: timestamp || new Date().toISOString(),
        isRead: false
    };

    notificationHistory.unshift(historyItem); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô history ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    if (notificationHistory.length > 100) {
        notificationHistory = notificationHistory.slice(0, 100);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
    saveHistoryToStorage();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge ‡πÉ‡∏ô history button
    updateHistoryBadge();

    return historyItem;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å history ‡∏•‡∏á localStorage
function saveHistoryToStorage() {
    try {
        localStorage.setItem('notificationHistory', JSON.stringify(notificationHistory));
    } catch (error) {
        console.warn('Cannot save notification history to localStorage:', error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î history ‡∏à‡∏≤‡∏Å localStorage
function loadHistoryFromStorage() {
    try {
        const saved = localStorage.getItem('notificationHistory');
        if (saved) {
            notificationHistory = JSON.parse(saved);
            updateHistoryBadge();
        }
    } catch (error) {
        console.warn('Cannot load notification history from localStorage:', error);
        notificationHistory = [];
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
function getUnreadCount() {
    return notificationHistory.filter(item => !item.isRead).length;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge ‡πÉ‡∏ô history button
function updateHistoryBadge() {
    const unreadCount = getUnreadCount();
    const badge = $('#notification-history-badge');

    if (unreadCount > 0) {
        if (badge.length === 0) {
            const badgeHtml = `<span id="notification-history-badge" class="size-4 absolute -top-2 -left-2 flex items-center justify-center bg-red-500 text-white text-xs rounded-full">${unreadCount > 99 ? '99+' : unreadCount}</span>`;
            $('#notification-history-btn').append(badgeHtml);
        } else {
            badge.text(unreadCount > 99 ? '99+' : unreadCount);
        }
    } else {
        badge.remove();
    }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
updateHistoryBadge();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° history (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ window load)
$(window).on('load', function () {
    if ($('#notification-history-btn').length === 0) {
        const historyButton = $(`
            <button id="notification-history-btn" title="notification" type="button" class="fade-in relative bg-[color:var(--bg-color)] rounded shadow-inner m-3 px-2 py-1 cursor-pointer md:mx-4 md:my-5 md:px-4 md:py-3 active:bg-[color:var(--accent-color)]">
                <i class="fa-regular fa-bell"></i>
            </button>
        `);

        $('#notification-history-content').append(historyButton);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener
        historyButton.on('click', toggleHistoryPanel);

        updateHistoryBadge();
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô history panel
function toggleHistoryPanel() {
    if (isHistoryPanelOpen) {
        closeHistoryPanel();
    } else {
        openHistoryPanel();
    }
}

function openHistoryPanel() {
    isHistoryPanelOpen = true;

    // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    notificationHistory.forEach(item => item.isRead = true);
    saveHistoryToStorage();
    updateHistoryBadge();

    const panel = $(`
        <div id="notification-history-panel" class="fixed inset-0 bg-black bg-opacity-25 z-30">
            <div class="fade-in h-full w-5/6 sm:w-full max-w-md fixed right-0 top-0 bg-[color:var(--white-smoker)] border-l shadow-xl">
                <div class="flex items-center justify-between border-b">
                    <h3 class="uppercase p-4 md:py-8">Notification history</h3>
                    <div class="flex items-center space-x-2">
                        <button id="clear-history-btn" title="delete all" class="fade-in relative bg-[color:var(--bg-color)] text-red-500 rounded shadow-inner m-3 px-2 py-1 cursor-pointer md:mx-4 md:my-5 md:px-4 md:py-3 hover:text-red-700 active:bg-[color:var(--accent-color)]"><i class="fa-solid fa-trash"></i></button>
                    </div>
                </div>
                <div id="history-content" class="p-4 h-full overflow-y-scroll pb-20">
                    ${renderHistoryItems()}
                </div>
            </div>
        </div>
    `);

    $('body').append(panel);

    // ‡∏õ‡∏¥‡∏î panel
    $('#close-history-panel, #notification-history-panel').on('click', function (e) {
        if (e.target === this) {
            closeHistoryPanel();
        }
    });

    // ‡∏õ‡∏∏‡πà‡∏° "Delete all"
    $('#clear-history-btn').on('click', function () {
        const $items = $('#history-content').children();

        if ($items.length === 0) return;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
        $items.addClass('animate-slide-out');

        // ‡∏£‡∏≠ animation ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á
        setTimeout(() => {
            clearHistory(); // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            $('#history-content').html(renderHistoryItems());
        }, 300); // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö duration ‡∏Ç‡∏≠‡∏á animation
    });

}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î history panel
function closeHistoryPanel() {
    isHistoryPanelOpen = false;
    $('#notification-history-panel').remove();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ history
function renderHistoryItems() {
    if (notificationHistory.length === 0) {
        return '<div class="!translate-x-0 text-center text-[color:var(--text-color)] py-8">No notification history</div>';
    }

    return notificationHistory.map(item => {
        const date = new Date(item.timestamp);
        const timeStr = date.toLocaleString('th-TH');
        const typeIcon = getTypeIcon(item.type);

        return `
            <div class="history-item bg-[color:var(--bg-color)] border rounded-lg shadow-inner mb-2 p-2 ${!item.isRead ? 'border-l-2 !border-l-[color:var(--primary-color)]' : ''}">
                <div class="flex items-start space-x-2">
                    <div class="flex-shrink-0 mt-1">
                        ${typeIcon}
                    </div>
                    <div class="flex-1 min-w-0">
                        ${item.link ?
                `<a href="${item.link}" class="text-sm text-[color:var(--primary-color)] hover:opacity-50 underline break-words" target="_blank" rel="noopener noreferrer">${item.message}</a>` :
                `<p class="text-sm break-words">${item.message}</p>`
            }
                        <p class="text-xs text-gray-500 mt-1">${timeStr}</p>
                    </div>
                    <button class="delete-history-item flex-shrink-0 hover:text-red-500" data-id="${item.id}">
                        <i class="fa-solid fa-trash text-gray-500"></i>
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ history
$(document).on('click', '.delete-history-item', function () {
    const itemId = $(this).data('id');
    const $item = $(this).closest('.history-item');

    $item.addClass('animate-slide-out');

    setTimeout(() => {
        notificationHistory = notificationHistory.filter(item => item.id !== itemId);
        saveHistoryToStorage();
        updateHistoryBadge();

        if (isHistoryPanelOpen) {
            $('#history-content').html(renderHistoryItems());
        }
    }, 300);
});

function addNotification(item) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á array
    notificationHistory.unshift(item); // ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
    saveHistoryToStorage();
    updateHistoryBadge();

    // ‡∏ñ‡πâ‡∏≤ panel ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    if (isHistoryPanelOpen) {
        $('#history-content').html(renderHistoryItems());
    }
}

setInterval(renderHistoryItems, 1000);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ icon ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
function getTypeIcon(type) {
    switch (type) {
        case 'success':
            return '<i class="fa-solid fa-circle-check text-green-500"></i>';
        case 'error':
            return '<i class="fa-solid fa-circle-exclamation text-red-500"></i>';
        case 'info':
            return '<i class="fa-solid fa-circle-info text-yellow-500"></i>';
        default:
            return '<i class="fa-regular fa-circle-info text-blue-500"></i>';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function clearHistory() {
    notificationHistory = [];
    saveHistoryToStorage();
    updateHistoryBadge();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• history (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)
function getNotificationHistory(limit = null) {
    return limit ? notificationHistory.slice(0, limit) : [...notificationHistory];
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ history
function searchHistory(query) {
    return notificationHistory.filter(item =>
        item.message.toLowerCase().includes(query.toLowerCase())
    );
}

function showNotification(message, type = 'info', link = null) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á history ‡∏Å‡πà‡∏≠‡∏ô
    addToHistory(message, type, link);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!notificationContainer) {
        notificationContainer = $('<div class="fixed bottom-4 right-4 z-50 space-y-2"></div>');
        $('body').append(notificationContainer);
    }

    const notification = $(`
        <div class="notification-item max-w-sm min-w-min bg-[color:var(--white-smoker)] border rounded-xl shadow-inner px-2 py-1 sm:px-3 sm:py-2 transition-all duration-300 transform translate-x-full select-none ${!link ? 'cursor-pointer' : ''}">
            <div class="flex items-center gap-2">
                <div class="flex-shrink-0">
                ${type === 'success' ?
            '<i class="fa-solid fa-circle-check text-green-500"></i>' :
            type === 'error' ?
                '<i class="fa-solid fa-circle-exclamation text-red-500"></i>' :
                type === 'info' ?
                    '<i class="fa-solid fa-circle-info text-yellow-500"></i>' :
                    '<i class="fa-regular fa-circle-info text-blue-500"></i>'
        }
                </div>
                <div class="flex-1">
                ${link ?
            `<a href="${link}" target="_blank" class="btn-text text-sm text-[color:var(--primary-color)] font-normal" rel="noopener noreferrer">${message}</a>` :
            `<p class="text-sm font-normal break-words line-clamp-1">${message}</p>`
        }
                </div>
            </div>
        </div>
    `);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° notification ‡πÉ‡∏ô container
    notificationContainer.append(notification);

    // Animation ‡πÄ‡∏Ç‡πâ‡∏≤
    setTimeout(() => {
        notification.removeClass('translate-x-full');
    }, 10);

    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timer
    let timeoutId;
    let isHovered = false;
    let isFocused = false;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° timer
    function startTimer() {
        if (!isHovered && !isFocused) {
            timeoutId = setTimeout(() => {
                closeNotification();
            }, 5000);
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î timer
    function stopTimer() {
        if (timeoutId) {
            clearTimeout(timeoutId);
            timeoutId = null;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î notification
    function closeNotification() {
        notification.addClass('translate-x-full opacity-0');
        setTimeout(() => {
            notification.remove();
            // ‡∏•‡∏ö notification ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
            const index = notificationQueue.indexOf(notification);
            if (index > -1) {
                notificationQueue.splice(index, 1);
            }
            // ‡∏•‡∏ö container ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ notification ‡πÅ‡∏•‡πâ‡∏ß
            if (notificationQueue.length === 0) {
                notificationContainer.remove();
                notificationContainer = null;
            }
        }, 300);
    }

    // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hover ‡πÅ‡∏•‡∏∞ focus
    notification.on('mouseenter', function () {
        isHovered = true;
        stopTimer();
    });

    notification.on('mouseleave', function () {
        isHovered = false;
        startTimer();
    });

    notification.on('focusin', function () {
        isFocused = true;
        stopTimer();
    });

    notification.on('focusout', function () {
        isFocused = false;
        startTimer();
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ
    if (!link) {
        notification.on('click', function () {
            closeNotification();
        });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° notification ‡πÉ‡∏ô queue
    notificationQueue.push(notification);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° timer
    startTimer();

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notification ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ï‡∏±‡∏ß
    if (notificationQueue.length > 5) {
        const oldestNotification = notificationQueue[0];
        oldestNotification.addClass('translate-x-full opacity-0');
        setTimeout(() => {
            oldestNotification.remove();
            notificationQueue.shift();
        }, 300);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î notification ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function clearAllNotifications() {
    notificationQueue.forEach(notification => {
        notification.addClass('translate-x-full opacity-0');
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
    notificationQueue = [];
    setTimeout(() => {
        if (notificationContainer) {
            notificationContainer.remove();
            notificationContainer = null;
        }
    }, 300);
}

// ‡πÇ‡∏´‡∏•‡∏î history ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
$(document).ready(function () {
    loadHistoryFromStorage();
});

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
// showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success'); 
// showNotification('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', 'info', 'https://example.com'); 
// showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'error'); 
// clearAllNotifications(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// clearHistory(); // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// getNotificationHistory(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// getNotificationHistory(10); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
// searchHistory('‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥

// ‚Äî[ theme ]‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

$(function () {
    const $html = $('html');
    const $select = $('#theme-switcher');

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å localStorage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const saved = localStorage.getItem('theme') || 'system';
    $select.val(saved);
    applyTheme(saved);

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
    $select.on('change', function () {
        const value = $(this).val();
        localStorage.setItem('theme', value);
        applyTheme(value);
    });

    function applyTheme(value) {
        $html.removeClass('theme-light theme-dark');
        if (value === 'light') {
            $html.addClass('theme-light');
        } else if (value === 'dark') {
            $html.addClass('theme-dark');
        }
        // ‡∏ñ‡πâ‡∏≤ system ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà class ‡πÉ‡∏î ‡πÜ
    }
});
